@model QuizApp.Models.Quiz
@using System.Security.Claims

@{
    ViewData["Title"] = "Rozpocznij quiz";
}

<h1>@Model.Tytul</h1>

<div id="quiz-container">
    <div id="timer">30</div>
    <div id="question-panel">
        <h2 id="question-text"></h2>
        <div id="answers-container"></div>
    </div>
    <button type="button" id="submit-button" class="btn btn-primary">Prześlij odpowiedź</button>
</div>

<!-- Kontener na ranking -->
<div id="ranking-container" style="display: none;">
    <h2>Ranking po pytaniu</h2>
    <ul id="ranking-list"></ul>
    <p id="next-question-timer">Przejście do kolejnego pytania za: <span id="countdown">10</span> sekund</p>
</div>

<link href="https://fonts.cdnfonts.com/css/seven-segment" rel="stylesheet">
<style>
    #quiz-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #timer {
        font-family: 'Seven Segment', sans-serif;
        font-size: 48px;
        color: #0f0;
        background-color: #000;
        padding: 10px;
        border-radius: 5px;
        text-align: center;
        width: 80px;
        margin: 0 auto;
        text-shadow: 0 0 10px #0f0;
    }

        #timer.red {
            color: red;
            text-shadow: 0 0 10px red;
        }

    #question-panel {
        margin-top: 20px;
        text-align: center;
    }

    #answers-container {
        margin-top: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .form-check {
        margin-bottom: 10px;
    }

    #submit-button {
        margin-top: 20px;
    }

    #ranking-container {
        margin-top: 20px;
        text-align: center;
    }

    #ranking-list {
        list-style: none;
        padding: 0;
    }

        #ranking-list li {
            margin-bottom: 5px;
        }

    #next-question-timer {
        margin-top: 15px;
        font-weight: bold;
        color: #666;
    }

    #countdown {
        color: #d00;
        font-weight: bold;
    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script>
    $(document).ready(function () {
        const quizId = @Model.Id;
        let uzytkownikId = "";
        let uzytkownikNick = "";

        const urlParams = new URLSearchParams(window.location.search);
        const userIdFromUrl = urlParams.get('userId');
        if (userIdFromUrl) {
            uzytkownikId = userIdFromUrl;

            // AJAX do pobrania nicku
            $.ajax({
                url: '@Url.Action("GetUserNick", "QuizPlay")',
                data: { userId: userIdFromUrl },
                async: false, // Ważne! Czekaj na odpowiedź
                success: function (nick) {
                    uzytkownikNick = nick;
                }

            });
        }

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/quizHub")
            .build();



        let pytania = @Html.Raw(Json.Serialize(Model.Pytania));
        let aktualnePytanieIndex = 0;
        let punkty = 0;
        let timerInterval;
        let rankingTimeout;
        let countdownInterval;

        // Funkcja wyświetlająca pytanie
        function wyswietlPytanie(pytanie) {
            $("#question-text").text(pytanie.tekst);
            $("#answers-container").empty();
            pytanie.odpowiedzi.forEach(odpowiedz => {
                const odpowiedzHtml = `
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="odpowiedz" value="${odpowiedz.id}" id="odpowiedz-${odpowiedz.id}">
                                <label class="form-check-label" for="odpowiedz-${odpowiedz.id}">${odpowiedz.tekst}</label>
                            </div>`;
                $("#answers-container").append(odpowiedzHtml);
            });
            $("#submit-button").prop("disabled", false);
        }

        // Funkcja do uruchomienia dokładnego timera
        function startTimer(seconds) {
            let startTime = Date.now();
            let endTime = startTime + seconds * 1000;

            const updateTimer = () => {
                const remaining = Math.max(0, Math.ceil((endTime - Date.now()) / 1000));
                $("#timer").text(remaining);

                if (remaining <= 5) $("#timer").addClass("red");
                else $("#timer").removeClass("red");

                if (remaining > 0) requestAnimationFrame(updateTimer);
                else $("#submit-button").click();
            };

            cancelAnimationFrame(timerInterval);
            updateTimer();
        }

        // Funkcja wyświetlająca ranking
        function showRanking(ranking, isLastQuestion) {
            $("#ranking-list").empty();
            ranking.forEach(user => {
                const listItem = $("<li>").text(`${user.Nick}: ${user.Punkty}`);
                $("#ranking-list").append(listItem);
            });

            if (!isLastQuestion) {
                let countdown = 10;
                $("#countdown").text(countdown);
                $("#next-question-timer").show();

                countdownInterval = setInterval(() => {
                    countdown--;
                    $("#countdown").text(countdown);
                    if (countdown <= 0) {
                        clearInterval(countdownInterval);
                        hideRankingAndContinue();
                    }
                }, 1000);
            } else {
                $("#next-question-timer").hide();
                // Usunięto przekierowanie stąd
            }

            $("#ranking-container").show();
        }

        // Funkcja ukrywająca ranking
        function hideRankingAndContinue() {
            $("#ranking-container").hide();
            clearInterval(countdownInterval);

            if (aktualnePytanieIndex < pytania.length - 1) {
                aktualnePytanieIndex++;
                wyswietlPytanie(pytania[aktualnePytanieIndex]);
                startTimer(30);
            }
        }

        // Obsługa zdarzeń SignalR
        connection.on("PokazPytanie", (pytanie) => {
            pytania[aktualnePytanieIndex] = pytanie;
            wyswietlPytanie(pytanie);
            startTimer(30);
        });

        connection.on("PytanieZakonczone", async () => {
            const ranking = await connection.invoke("PobierzRanking", quizId);
            const isLastQuestion = aktualnePytanieIndex === pytania.length - 1;
            showRanking(ranking, isLastQuestion);
        });

        connection.on("AktualizujRanking", function (ranking) {
            $("#ranking-list").empty();
            ranking.forEach(user => {
                $("#ranking-list").append(`<li>${user.nick}: ${user.punkty}</li>`);
            });
            $("#ranking-container").show();
            console.log("AktualizujRanking: ", ranking);
        });


        // Inicjalizacja połączenia
        connection.start()
            .then(() => {
                connection.invoke("DołączDoQuizu", quizId, uzytkownikId, uzytkownikNick);
                wyswietlPytanie(pytania[0]);
                startTimer(30);
            })
            .catch(err => console.error(err));

        // Obsługa przycisku przesyłania
        $("#submit-button").click(function () {
            const wybranaOdpowiedz = $("input[name='odpowiedz']:checked").val();
            const czasOdpowiedzi = 30 - parseInt($("#timer").text());

            if (wybranaOdpowiedz) {
                cancelAnimationFrame(timerInterval);
                $("#submit-button").prop("disabled", true);
                console.log("Wysyłam odpowiedź na pytanie: ", pytania[aktualnePytanieIndex].id);
                connection.invoke("OdpowiedzNaPytanie", quizId,
                    pytania[aktualnePytanieIndex].id,
                    parseInt(wybranaOdpowiedz),
                    czasOdpowiedzi * 1000,
                    uzytkownikId
                );
            }
        });
        connection.on("OdpowiedzNaPytaniePotwierdzenie", (ranking, isLastQuestion) => {
            try {
                $("#submit-button").prop("disabled", false); // Odblokuj przycisk
                showRanking(ranking, isLastQuestion);
            } catch (error) {
                console.error(error);
                alert("Wystąpił błąd podczas wyświetlania rankingu.");
                $("#submit-button").prop("disabled", false);
            }
        });

        connection.on("BladOdpowiedzi", (komunikat) => {
            alert(komunikat);
            $("#submit-button").prop("disabled", false); // Odblokuj przycisk
        });

        // Dodaj obsługę zdarzenia KoniecQuizuKlient
        connection.on("KoniecQuizuKlient", (ranking) => {
            $("#submit-button").prop("disabled", false); // Odblokuj przycisk
            window.location.href = '@Url.Action("Wynik", "QuizPlay", new { quizId = Model.Id })' + '&punkty=' + punkty;
        });

    });
</script>